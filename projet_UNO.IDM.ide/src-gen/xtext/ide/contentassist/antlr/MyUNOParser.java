/*
 * generated by Xtext 2.23.0
 */
package xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.ide.contentassist.antlr.internal.InternalMyUNOParser;
import xtext.services.MyUNOGrammarAccess;

public class MyUNOParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyUNOGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyUNOGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGagnantAccess().getAlternatives(), "rule__Gagnant__Alternatives");
			builder.put(grammarAccess.getMainAccess().getAlternatives(), "rule__Main__Alternatives");
			builder.put(grammarAccess.getTempsAccess().getAlternatives(), "rule__Temps__Alternatives");
			builder.put(grammarAccess.getNombre_de_joueursAccess().getAlternatives(), "rule__Nombre_de_joueurs__Alternatives");
			builder.put(grammarAccess.getTourAccess().getAlternatives(), "rule__Tour__Alternatives");
			builder.put(grammarAccess.getNombre_de_cartesAccess().getAlternatives(), "rule__Nombre_de_cartes__Alternatives");
			builder.put(grammarAccess.getCartes_par_tourAccess().getAlternatives(), "rule__Cartes_par_tour__Alternatives");
			builder.put(grammarAccess.getContestationAccess().getAlternatives(), "rule__Contestation__Alternatives");
			builder.put(grammarAccess.getVarianteAccess().getGroup(), "rule__Variante__Group__0");
			builder.put(grammarAccess.getInitialAccess().getGroup(), "rule__Initial__Group__0");
			builder.put(grammarAccess.getInitialAccess().getGroup_4(), "rule__Initial__Group_4__0");
			builder.put(grammarAccess.getMancheAccess().getGroup(), "rule__Manche__Group__0");
			builder.put(grammarAccess.getMancheAccess().getGroup_2(), "rule__Manche__Group_2__0");
			builder.put(grammarAccess.getMancheAccess().getGroup_3(), "rule__Manche__Group_3__0");
			builder.put(grammarAccess.getMancheAccess().getGroup_4(), "rule__Manche__Group_4__0");
			builder.put(grammarAccess.getMancheAccess().getGroup_5(), "rule__Manche__Group_5__0");
			builder.put(grammarAccess.getFinalAccess().getGroup(), "rule__Final__Group__0");
			builder.put(grammarAccess.getGagnantAccess().getGroup_0(), "rule__Gagnant__Group_0__0");
			builder.put(grammarAccess.getGagnantAccess().getGroup_1(), "rule__Gagnant__Group_1__0");
			builder.put(grammarAccess.getVarianteAccess().getNameAssignment_1(), "rule__Variante__NameAssignment_1");
			builder.put(grammarAccess.getVarianteAccess().getDebutAssignment_3(), "rule__Variante__DebutAssignment_3");
			builder.put(grammarAccess.getVarianteAccess().getMancheAssignment_4(), "rule__Variante__MancheAssignment_4");
			builder.put(grammarAccess.getVarianteAccess().getFinAssignment_5(), "rule__Variante__FinAssignment_5");
			builder.put(grammarAccess.getInitialAccess().getMainAssignment_2(), "rule__Initial__MainAssignment_2");
			builder.put(grammarAccess.getInitialAccess().getTempsAssignment_3(), "rule__Initial__TempsAssignment_3");
			builder.put(grammarAccess.getInitialAccess().getSecondesAssignment_4_1(), "rule__Initial__SecondesAssignment_4_1");
			builder.put(grammarAccess.getInitialAccess().getNombre_cartes_en_mainAssignment_6(), "rule__Initial__Nombre_cartes_en_mainAssignment_6");
			builder.put(grammarAccess.getInitialAccess().getNombre_de_joueursAssignment_8(), "rule__Initial__Nombre_de_joueursAssignment_8");
			builder.put(grammarAccess.getMancheAccess().getTourAssignment_2_2(), "rule__Manche__TourAssignment_2_2");
			builder.put(grammarAccess.getMancheAccess().getNombre_de_cartesAssignment_2_5(), "rule__Manche__Nombre_de_cartesAssignment_2_5");
			builder.put(grammarAccess.getMancheAccess().getCartes_par_toursAssignment_3_2(), "rule__Manche__Cartes_par_toursAssignment_3_2");
			builder.put(grammarAccess.getMancheAccess().getCarte_specialeAssignment_4_1(), "rule__Manche__Carte_specialeAssignment_4_1");
			builder.put(grammarAccess.getMancheAccess().getContestationAssignment_5_2(), "rule__Manche__ContestationAssignment_5_2");
			builder.put(grammarAccess.getMancheAccess().getConditionAssignment_7(), "rule__Manche__ConditionAssignment_7");
			builder.put(grammarAccess.getFinalAccess().getGagnantAssignment_2(), "rule__Final__GagnantAssignment_2");
			builder.put(grammarAccess.getGagnantAccess().getNombre_de_manches_gagneesAssignment_0_0(), "rule__Gagnant__Nombre_de_manches_gagneesAssignment_0_0");
			builder.put(grammarAccess.getGagnantAccess().getNombreAssignment_0_1(), "rule__Gagnant__NombreAssignment_0_1");
			builder.put(grammarAccess.getGagnantAccess().getPointsAssignment_1_0(), "rule__Gagnant__PointsAssignment_1_0");
			builder.put(grammarAccess.getGagnantAccess().getNombre_de_pointsAssignment_1_1(), "rule__Gagnant__Nombre_de_pointsAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyUNOGrammarAccess grammarAccess;

	@Override
	protected InternalMyUNOParser createParser() {
		InternalMyUNOParser result = new InternalMyUNOParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyUNOGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyUNOGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
