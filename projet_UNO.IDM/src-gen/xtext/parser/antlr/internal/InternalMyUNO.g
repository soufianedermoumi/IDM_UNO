/*
 * generated by Xtext 2.23.0
 */
grammar InternalMyUNO;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.services.MyUNOGrammarAccess;

}

@parser::members {

 	private MyUNOGrammarAccess grammarAccess;

    public InternalMyUNOParser(TokenStream input, MyUNOGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Variante";
   	}

   	@Override
   	protected MyUNOGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleVariante
entryRuleVariante returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarianteRule()); }
	iv_ruleVariante=ruleVariante
	{ $current=$iv_ruleVariante.current; }
	EOF;

// Rule Variante
ruleVariante returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='variante'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarianteAccess().getVarianteKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVarianteAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarianteRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getVarianteAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarianteAccess().getDebutInitialParserRuleCall_3_0());
				}
				lv_debut_3_0=ruleInitial
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarianteRule());
					}
					set(
						$current,
						"debut",
						lv_debut_3_0,
						"xtext.MyUNO.Initial");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVarianteAccess().getMancheMancheParserRuleCall_4_0());
				}
				lv_manche_4_0=ruleManche
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarianteRule());
					}
					set(
						$current,
						"manche",
						lv_manche_4_0,
						"xtext.MyUNO.Manche");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVarianteAccess().getFinFinalParserRuleCall_5_0());
				}
				lv_fin_5_0=ruleFinal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarianteRule());
					}
					set(
						$current,
						"fin",
						lv_fin_5_0,
						"xtext.MyUNO.Final");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getVarianteAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleInitial
entryRuleInitial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialRule()); }
	iv_ruleInitial=ruleInitial
	{ $current=$iv_ruleInitial.current; }
	EOF;

// Rule Initial
ruleInitial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Debut'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialAccess().getDebutKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitialAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialAccess().getMainMainEnumRuleCall_2_0());
				}
				lv_main_2_0=ruleMain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialRule());
					}
					set(
						$current,
						"main",
						lv_main_2_0,
						"xtext.MyUNO.Main");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialAccess().getTempsTempsEnumRuleCall_3_0());
				}
				lv_temps_3_0=ruleTemps
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialRule());
					}
					set(
						$current,
						"temps",
						lv_temps_3_0,
						"xtext.MyUNO.Temps");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='temps:'
			{
				newLeafNode(otherlv_4, grammarAccess.getInitialAccess().getTempsKeyword_4_0());
			}
			(
				(
					lv_secondes_5_0=RULE_INT
					{
						newLeafNode(lv_secondes_5_0, grammarAccess.getInitialAccess().getSecondesINTTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInitialRule());
						}
						setWithLastConsumed(
							$current,
							"secondes",
							lv_secondes_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		otherlv_6='nombre_cartes_en_main'
		{
			newLeafNode(otherlv_6, grammarAccess.getInitialAccess().getNombre_cartes_en_mainKeyword_5());
		}
		(
			(
				lv_nombre_cartes_en_main_7_0=RULE_INT
				{
					newLeafNode(lv_nombre_cartes_en_main_7_0, grammarAccess.getInitialAccess().getNombre_cartes_en_mainINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialRule());
					}
					setWithLastConsumed(
						$current,
						"nombre_cartes_en_main",
						lv_nombre_cartes_en_main_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8='nombre_de_joueurs'
		{
			newLeafNode(otherlv_8, grammarAccess.getInitialAccess().getNombre_de_joueursKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialAccess().getNombre_de_joueursNombre_de_joueursEnumRuleCall_8_0());
				}
				lv_nombre_de_joueurs_9_0=ruleNombre_de_joueurs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialRule());
					}
					set(
						$current,
						"nombre_de_joueurs",
						lv_nombre_de_joueurs_9_0,
						"xtext.MyUNO.Nombre_de_joueurs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=';'
		{
			newLeafNode(otherlv_10, grammarAccess.getInitialAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRuleManche
entryRuleManche returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMancheRule()); }
	iv_ruleManche=ruleManche
	{ $current=$iv_ruleManche.current; }
	EOF;

// Rule Manche
ruleManche returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Manche'
		{
			newLeafNode(otherlv_0, grammarAccess.getMancheAccess().getMancheKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getMancheAccess().getColonKeyword_1());
		}
		(
			otherlv_2='pioche'
			{
				newLeafNode(otherlv_2, grammarAccess.getMancheAccess().getPiocheKeyword_2_0());
			}
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getMancheAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMancheAccess().getTourTourEnumRuleCall_2_2_0());
					}
					lv_tour_4_0=ruleTour
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMancheRule());
						}
						set(
							$current,
							"tour",
							lv_tour_4_0,
							"xtext.MyUNO.Tour");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getMancheAccess().getRightParenthesisKeyword_2_3());
			}
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getMancheAccess().getLeftParenthesisKeyword_2_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMancheAccess().getNombre_de_cartesNombre_de_cartesEnumRuleCall_2_5_0());
					}
					lv_nombre_de_cartes_7_0=ruleNombre_de_cartes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMancheRule());
						}
						set(
							$current,
							"nombre_de_cartes",
							lv_nombre_de_cartes_7_0,
							"xtext.MyUNO.Nombre_de_cartes");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getMancheAccess().getRightParenthesisKeyword_2_6());
			}
		)?
		(
			otherlv_9='cartes_par_tour'
			{
				newLeafNode(otherlv_9, grammarAccess.getMancheAccess().getCartes_par_tourKeyword_3_0());
			}
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getMancheAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMancheAccess().getCartes_par_toursCartes_par_tourEnumRuleCall_3_2_0());
					}
					lv_cartes_par_tours_11_0=ruleCartes_par_tour
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMancheRule());
						}
						set(
							$current,
							"cartes_par_tours",
							lv_cartes_par_tours_11_0,
							"xtext.MyUNO.Cartes_par_tour");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getMancheAccess().getRightParenthesisKeyword_3_3());
			}
		)?
		(
			otherlv_13='carte_sp\u00E9ciale'
			{
				newLeafNode(otherlv_13, grammarAccess.getMancheAccess().getCarte_spCialeKeyword_4_0());
			}
			(
				(
					lv_carte_speciale_14_0=RULE_STRING
					{
						newLeafNode(lv_carte_speciale_14_0, grammarAccess.getMancheAccess().getCarte_specialeSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMancheRule());
						}
						setWithLastConsumed(
							$current,
							"carte_speciale",
							lv_carte_speciale_14_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			otherlv_15='Contestation'
			{
				newLeafNode(otherlv_15, grammarAccess.getMancheAccess().getContestationKeyword_5_0());
			}
			otherlv_16='('
			{
				newLeafNode(otherlv_16, grammarAccess.getMancheAccess().getLeftParenthesisKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMancheAccess().getContestationContestationEnumRuleCall_5_2_0());
					}
					lv_contestation_17_0=ruleContestation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMancheRule());
						}
						set(
							$current,
							"contestation",
							lv_contestation_17_0,
							"xtext.MyUNO.Contestation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18=')'
			{
				newLeafNode(otherlv_18, grammarAccess.getMancheAccess().getRightParenthesisKeyword_5_3());
			}
		)?
		otherlv_19='fin'
		{
			newLeafNode(otherlv_19, grammarAccess.getMancheAccess().getFinKeyword_6());
		}
		(
			(
				lv_condition_20_0=RULE_STRING
				{
					newLeafNode(lv_condition_20_0, grammarAccess.getMancheAccess().getConditionSTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMancheRule());
					}
					setWithLastConsumed(
						$current,
						"condition",
						lv_condition_20_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_21=';'
		{
			newLeafNode(otherlv_21, grammarAccess.getMancheAccess().getSemicolonKeyword_8());
		}
	)
;

// Entry rule entryRuleFinal
entryRuleFinal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFinalRule()); }
	iv_ruleFinal=ruleFinal
	{ $current=$iv_ruleFinal.current; }
	EOF;

// Rule Final
ruleFinal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='gagnant avec'
		{
			newLeafNode(otherlv_0, grammarAccess.getFinalAccess().getGagnantAvecKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFinalAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFinalAccess().getGagnantGagnantParserRuleCall_2_0());
				}
				lv_gagnant_2_0=ruleGagnant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFinalRule());
					}
					set(
						$current,
						"gagnant",
						lv_gagnant_2_0,
						"xtext.MyUNO.Gagnant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getFinalAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleGagnant
entryRuleGagnant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGagnantRule()); }
	iv_ruleGagnant=ruleGagnant
	{ $current=$iv_ruleGagnant.current; }
	EOF;

// Rule Gagnant
ruleGagnant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_nombre_de_manches_gagnees_0_0='manches_gagne\u00E9es'
					{
						newLeafNode(lv_nombre_de_manches_gagnees_0_0, grammarAccess.getGagnantAccess().getNombre_de_manches_gagneesManches_gagneEsKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGagnantRule());
						}
						setWithLastConsumed($current, "nombre_de_manches_gagnees", lv_nombre_de_manches_gagnees_0_0, "manches_gagne\u00E9es");
					}
				)
			)
			(
				(
					lv_nombre_1_0=RULE_INT
					{
						newLeafNode(lv_nombre_1_0, grammarAccess.getGagnantAccess().getNombreINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGagnantRule());
						}
						setWithLastConsumed(
							$current,
							"nombre",
							lv_nombre_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_points_2_0='avec les points'
					{
						newLeafNode(lv_points_2_0, grammarAccess.getGagnantAccess().getPointsAvecLesPointsKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGagnantRule());
						}
						setWithLastConsumed($current, "points", lv_points_2_0, "avec les points");
					}
				)
			)
			(
				(
					lv_nombre_de_points_3_0=RULE_INT
					{
						newLeafNode(lv_nombre_de_points_3_0, grammarAccess.getGagnantAccess().getNombre_de_pointsINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGagnantRule());
						}
						setWithLastConsumed(
							$current,
							"nombre_de_points",
							lv_nombre_de_points_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Rule Main
ruleMain returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='visible'
			{
				$current = grammarAccess.getMainAccess().getVisibleEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMainAccess().getVisibleEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='cachee'
			{
				$current = grammarAccess.getMainAccess().getCacheeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMainAccess().getCacheeEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Temps
ruleTemps returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='limit\u00E9'
			{
				$current = grammarAccess.getTempsAccess().getVisibleEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTempsAccess().getVisibleEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='non_limit\u00E9'
			{
				$current = grammarAccess.getTempsAccess().getCacheeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTempsAccess().getCacheeEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Nombre_de_joueurs
ruleNombre_de_joueurs returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='2'
			{
				$current = grammarAccess.getNombre_de_joueursAccess().getDeuxEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNombre_de_joueursAccess().getDeuxEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>2'
			{
				$current = grammarAccess.getNombre_de_joueursAccess().getPlus_que_2EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNombre_de_joueursAccess().getPlus_que_2EnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Tour
ruleTour returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='passer'
			{
				$current = grammarAccess.getTourAccess().getPasserEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTourAccess().getPasserEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='jouer'
			{
				$current = grammarAccess.getTourAccess().getJouerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTourAccess().getJouerEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Nombre_de_cartes
ruleNombre_de_cartes returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='1'
			{
				$current = grammarAccess.getNombre_de_cartesAccess().getUne_carteEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNombre_de_cartesAccess().getUne_carteEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='3'
			{
				$current = grammarAccess.getNombre_de_cartesAccess().getTrois_cartesEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNombre_de_cartesAccess().getTrois_cartesEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Cartes_par_tour
ruleCartes_par_tour returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='une carte \u00E0 la fois'
			{
				$current = grammarAccess.getCartes_par_tourAccess().getUneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCartes_par_tourAccess().getUneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='plusieurs cartes \u00E0 la fois'
			{
				$current = grammarAccess.getCartes_par_tourAccess().getPlusieursEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCartes_par_tourAccess().getPlusieursEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Contestation
ruleContestation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='valide'
			{
				$current = grammarAccess.getContestationAccess().getValideEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getContestationAccess().getValideEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='fausse'
			{
				$current = grammarAccess.getContestationAccess().getFausseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getContestationAccess().getFausseEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
