/*
 * generated by Xtext 2.23.0
 */
package xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.myUNO.Final;
import xtext.myUNO.Gagnant;
import xtext.myUNO.Initial;
import xtext.myUNO.Manche;
import xtext.myUNO.MyUNOPackage;
import xtext.myUNO.Variante;
import xtext.services.MyUNOGrammarAccess;

@SuppressWarnings("all")
public class MyUNOSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyUNOGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyUNOPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyUNOPackage.FINAL:
				sequence_Final(context, (Final) semanticObject); 
				return; 
			case MyUNOPackage.GAGNANT:
				sequence_Gagnant(context, (Gagnant) semanticObject); 
				return; 
			case MyUNOPackage.INITIAL:
				sequence_Initial(context, (Initial) semanticObject); 
				return; 
			case MyUNOPackage.MANCHE:
				sequence_Manche(context, (Manche) semanticObject); 
				return; 
			case MyUNOPackage.VARIANTE:
				sequence_Variante(context, (Variante) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Final returns Final
	 *
	 * Constraint:
	 *     gagnant=Gagnant
	 */
	protected void sequence_Final(ISerializationContext context, Final semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUNOPackage.Literals.FINAL__GAGNANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUNOPackage.Literals.FINAL__GAGNANT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFinalAccess().getGagnantGagnantParserRuleCall_2_0(), semanticObject.getGagnant());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Gagnant returns Gagnant
	 *
	 * Constraint:
	 *     ((nombre_de_manches_gagnees='manches_gagne√©es' nombre=INT) | (points='avec les points' nombre_de_points=INT))
	 */
	protected void sequence_Gagnant(ISerializationContext context, Gagnant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Initial returns Initial
	 *
	 * Constraint:
	 *     (main=Main temps=Temps secondes=INT? nombre_cartes_en_main=INT nombre_de_joueurs=Nombre_de_joueurs)
	 */
	protected void sequence_Initial(ISerializationContext context, Initial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Manche returns Manche
	 *
	 * Constraint:
	 *     (
	 *         (tour=Tour nombre_de_cartes=Nombre_de_cartes)? 
	 *         cartes_par_tours=Cartes_par_tour? 
	 *         carte_speciale=STRING? 
	 *         contestation=Contestation? 
	 *         condition=STRING
	 *     )
	 */
	protected void sequence_Manche(ISerializationContext context, Manche semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variante returns Variante
	 *
	 * Constraint:
	 *     (name=STRING debut=Initial manche=Manche fin=Final)
	 */
	protected void sequence_Variante(ISerializationContext context, Variante semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyUNOPackage.Literals.VARIANTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUNOPackage.Literals.VARIANTE__NAME));
			if (transientValues.isValueTransient(semanticObject, MyUNOPackage.Literals.VARIANTE__DEBUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUNOPackage.Literals.VARIANTE__DEBUT));
			if (transientValues.isValueTransient(semanticObject, MyUNOPackage.Literals.VARIANTE__MANCHE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUNOPackage.Literals.VARIANTE__MANCHE));
			if (transientValues.isValueTransient(semanticObject, MyUNOPackage.Literals.VARIANTE__FIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyUNOPackage.Literals.VARIANTE__FIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarianteAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVarianteAccess().getDebutInitialParserRuleCall_3_0(), semanticObject.getDebut());
		feeder.accept(grammarAccess.getVarianteAccess().getMancheMancheParserRuleCall_4_0(), semanticObject.getManche());
		feeder.accept(grammarAccess.getVarianteAccess().getFinFinalParserRuleCall_5_0(), semanticObject.getFin());
		feeder.finish();
	}
	
	
}
