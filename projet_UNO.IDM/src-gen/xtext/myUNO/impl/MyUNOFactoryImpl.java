/**
 * generated by Xtext 2.23.0
 */
package xtext.myUNO.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import xtext.myUNO.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyUNOFactoryImpl extends EFactoryImpl implements MyUNOFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyUNOFactory init()
  {
    try
    {
      MyUNOFactory theMyUNOFactory = (MyUNOFactory)EPackage.Registry.INSTANCE.getEFactory(MyUNOPackage.eNS_URI);
      if (theMyUNOFactory != null)
      {
        return theMyUNOFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyUNOFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyUNOFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyUNOPackage.VARIANTE: return createVariante();
      case MyUNOPackage.INITIAL: return createInitial();
      case MyUNOPackage.MANCHE: return createManche();
      case MyUNOPackage.FINAL: return createFinal();
      case MyUNOPackage.GAGNANT: return createGagnant();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyUNOPackage.MAIN:
        return createMainFromString(eDataType, initialValue);
      case MyUNOPackage.TEMPS:
        return createTempsFromString(eDataType, initialValue);
      case MyUNOPackage.NOMBRE_DE_JOUEURS:
        return createNombre_de_joueursFromString(eDataType, initialValue);
      case MyUNOPackage.TOUR:
        return createTourFromString(eDataType, initialValue);
      case MyUNOPackage.NOMBRE_DE_CARTES:
        return createNombre_de_cartesFromString(eDataType, initialValue);
      case MyUNOPackage.CARTES_PAR_TOUR:
        return createCartes_par_tourFromString(eDataType, initialValue);
      case MyUNOPackage.CONTESTATION:
        return createContestationFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyUNOPackage.MAIN:
        return convertMainToString(eDataType, instanceValue);
      case MyUNOPackage.TEMPS:
        return convertTempsToString(eDataType, instanceValue);
      case MyUNOPackage.NOMBRE_DE_JOUEURS:
        return convertNombre_de_joueursToString(eDataType, instanceValue);
      case MyUNOPackage.TOUR:
        return convertTourToString(eDataType, instanceValue);
      case MyUNOPackage.NOMBRE_DE_CARTES:
        return convertNombre_de_cartesToString(eDataType, instanceValue);
      case MyUNOPackage.CARTES_PAR_TOUR:
        return convertCartes_par_tourToString(eDataType, instanceValue);
      case MyUNOPackage.CONTESTATION:
        return convertContestationToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variante createVariante()
  {
    VarianteImpl variante = new VarianteImpl();
    return variante;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initial createInitial()
  {
    InitialImpl initial = new InitialImpl();
    return initial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Manche createManche()
  {
    MancheImpl manche = new MancheImpl();
    return manche;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Final createFinal()
  {
    FinalImpl final_ = new FinalImpl();
    return final_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Gagnant createGagnant()
  {
    GagnantImpl gagnant = new GagnantImpl();
    return gagnant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Main createMainFromString(EDataType eDataType, String initialValue)
  {
    Main result = Main.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMainToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Temps createTempsFromString(EDataType eDataType, String initialValue)
  {
    Temps result = Temps.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTempsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Nombre_de_joueurs createNombre_de_joueursFromString(EDataType eDataType, String initialValue)
  {
    Nombre_de_joueurs result = Nombre_de_joueurs.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertNombre_de_joueursToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tour createTourFromString(EDataType eDataType, String initialValue)
  {
    Tour result = Tour.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTourToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Nombre_de_cartes createNombre_de_cartesFromString(EDataType eDataType, String initialValue)
  {
    Nombre_de_cartes result = Nombre_de_cartes.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertNombre_de_cartesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cartes_par_tour createCartes_par_tourFromString(EDataType eDataType, String initialValue)
  {
    Cartes_par_tour result = Cartes_par_tour.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCartes_par_tourToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Contestation createContestationFromString(EDataType eDataType, String initialValue)
  {
    Contestation result = Contestation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertContestationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyUNOPackage getMyUNOPackage()
  {
    return (MyUNOPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyUNOPackage getPackage()
  {
    return MyUNOPackage.eINSTANCE;
  }

} //MyUNOFactoryImpl
