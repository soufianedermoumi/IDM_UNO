/*
 * generated by Xtext 2.23.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyUNOGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class VarianteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Variante");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarianteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDebutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDebutInitialParserRuleCall_3_0 = (RuleCall)cDebutAssignment_3.eContents().get(0);
		private final Assignment cMancheAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMancheMancheParserRuleCall_4_0 = (RuleCall)cMancheAssignment_4.eContents().get(0);
		private final Assignment cFinAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFinFinalParserRuleCall_5_0 = (RuleCall)cFinAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Variante:
		//	'variante' name=STRING
		//	'{'
		//	debut=Initial
		//	manche=Manche
		//	fin=Final
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'variante' name=STRING '{' debut=Initial manche=Manche fin=Final '}'
		public Group getGroup() { return cGroup; }
		
		//'variante'
		public Keyword getVarianteKeyword_0() { return cVarianteKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//debut=Initial
		public Assignment getDebutAssignment_3() { return cDebutAssignment_3; }
		
		//Initial
		public RuleCall getDebutInitialParserRuleCall_3_0() { return cDebutInitialParserRuleCall_3_0; }
		
		//manche=Manche
		public Assignment getMancheAssignment_4() { return cMancheAssignment_4; }
		
		//Manche
		public RuleCall getMancheMancheParserRuleCall_4_0() { return cMancheMancheParserRuleCall_4_0; }
		
		//fin=Final
		public Assignment getFinAssignment_5() { return cFinAssignment_5; }
		
		//Final
		public RuleCall getFinFinalParserRuleCall_5_0() { return cFinFinalParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDebutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMainMainEnumRuleCall_2_0 = (RuleCall)cMainAssignment_2.eContents().get(0);
		private final Assignment cTempsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTempsTempsEnumRuleCall_3_0 = (RuleCall)cTempsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTempsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSecondesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSecondesINTTerminalRuleCall_4_1_0 = (RuleCall)cSecondesAssignment_4_1.eContents().get(0);
		private final Keyword cNombre_cartes_en_mainKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNombre_cartes_en_mainAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNombre_cartes_en_mainINTTerminalRuleCall_6_0 = (RuleCall)cNombre_cartes_en_mainAssignment_6.eContents().get(0);
		private final Keyword cNombre_de_joueursKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNombre_de_joueursAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNombre_de_joueursNombre_de_joueursEnumRuleCall_8_0 = (RuleCall)cNombre_de_joueursAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////=======Initiale=======
		//Initial:
		//	'Debut' ':'
		//	main=Main
		//	temps=Temps ('temps:' secondes=INT)?
		//	'nombre_cartes_en_main' nombre_cartes_en_main=INT
		//	'nombre_de_joueurs' nombre_de_joueurs=Nombre_de_joueurs
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Debut' ':' main=Main temps=Temps ('temps:' secondes=INT)? 'nombre_cartes_en_main' nombre_cartes_en_main=INT
		//'nombre_de_joueurs' nombre_de_joueurs=Nombre_de_joueurs ';'
		public Group getGroup() { return cGroup; }
		
		//'Debut'
		public Keyword getDebutKeyword_0() { return cDebutKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//main=Main
		public Assignment getMainAssignment_2() { return cMainAssignment_2; }
		
		//Main
		public RuleCall getMainMainEnumRuleCall_2_0() { return cMainMainEnumRuleCall_2_0; }
		
		//temps=Temps
		public Assignment getTempsAssignment_3() { return cTempsAssignment_3; }
		
		//Temps
		public RuleCall getTempsTempsEnumRuleCall_3_0() { return cTempsTempsEnumRuleCall_3_0; }
		
		//('temps:' secondes=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'temps:'
		public Keyword getTempsKeyword_4_0() { return cTempsKeyword_4_0; }
		
		//secondes=INT
		public Assignment getSecondesAssignment_4_1() { return cSecondesAssignment_4_1; }
		
		//INT
		public RuleCall getSecondesINTTerminalRuleCall_4_1_0() { return cSecondesINTTerminalRuleCall_4_1_0; }
		
		//'nombre_cartes_en_main'
		public Keyword getNombre_cartes_en_mainKeyword_5() { return cNombre_cartes_en_mainKeyword_5; }
		
		//nombre_cartes_en_main=INT
		public Assignment getNombre_cartes_en_mainAssignment_6() { return cNombre_cartes_en_mainAssignment_6; }
		
		//INT
		public RuleCall getNombre_cartes_en_mainINTTerminalRuleCall_6_0() { return cNombre_cartes_en_mainINTTerminalRuleCall_6_0; }
		
		//'nombre_de_joueurs'
		public Keyword getNombre_de_joueursKeyword_7() { return cNombre_de_joueursKeyword_7; }
		
		//nombre_de_joueurs=Nombre_de_joueurs
		public Assignment getNombre_de_joueursAssignment_8() { return cNombre_de_joueursAssignment_8; }
		
		//Nombre_de_joueurs
		public RuleCall getNombre_de_joueursNombre_de_joueursEnumRuleCall_8_0() { return cNombre_de_joueursNombre_de_joueursEnumRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class MancheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Manche");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMancheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPiocheKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTourAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTourTourEnumRuleCall_2_2_0 = (RuleCall)cTourAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cNombre_de_cartesAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cNombre_de_cartesNombre_de_cartesEnumRuleCall_2_5_0 = (RuleCall)cNombre_de_cartesAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCartes_par_tourKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cCartes_par_toursAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cCartes_par_toursCartes_par_tourEnumRuleCall_3_2_0 = (RuleCall)cCartes_par_toursAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCarte_spCialeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCarte_specialeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCarte_specialeSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cCarte_specialeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cContestationKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cContestationAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cContestationContestationEnumRuleCall_5_2_0 = (RuleCall)cContestationAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cFinKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConditionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConditionSTRINGTerminalRuleCall_7_0 = (RuleCall)cConditionAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////=======Manche=======
		//Manche:
		//	'Manche' ':' ('pioche' '(' tour=Tour ')' '(' nombre_de_cartes=Nombre_de_cartes ')')? ('cartes_par_tour' '('
		//	cartes_par_tours=Cartes_par_tour ')')? ('carte_spéciale' carte_speciale=STRING)? ('Contestation' '('
		//	contestation=Contestation ')')?
		//	'fin' condition=STRING
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Manche' ':' ('pioche' '(' tour=Tour ')' '(' nombre_de_cartes=Nombre_de_cartes ')')? ('cartes_par_tour' '('
		//cartes_par_tours=Cartes_par_tour ')')? ('carte_spéciale' carte_speciale=STRING)? ('Contestation' '('
		//contestation=Contestation ')')? 'fin' condition=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'Manche'
		public Keyword getMancheKeyword_0() { return cMancheKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//('pioche' '(' tour=Tour ')' '(' nombre_de_cartes=Nombre_de_cartes ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'pioche'
		public Keyword getPiocheKeyword_2_0() { return cPiocheKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//tour=Tour
		public Assignment getTourAssignment_2_2() { return cTourAssignment_2_2; }
		
		//Tour
		public RuleCall getTourTourEnumRuleCall_2_2_0() { return cTourTourEnumRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_4() { return cLeftParenthesisKeyword_2_4; }
		
		//nombre_de_cartes=Nombre_de_cartes
		public Assignment getNombre_de_cartesAssignment_2_5() { return cNombre_de_cartesAssignment_2_5; }
		
		//Nombre_de_cartes
		public RuleCall getNombre_de_cartesNombre_de_cartesEnumRuleCall_2_5_0() { return cNombre_de_cartesNombre_de_cartesEnumRuleCall_2_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
		
		//('cartes_par_tour' '(' cartes_par_tours=Cartes_par_tour ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'cartes_par_tour'
		public Keyword getCartes_par_tourKeyword_3_0() { return cCartes_par_tourKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//cartes_par_tours=Cartes_par_tour
		public Assignment getCartes_par_toursAssignment_3_2() { return cCartes_par_toursAssignment_3_2; }
		
		//Cartes_par_tour
		public RuleCall getCartes_par_toursCartes_par_tourEnumRuleCall_3_2_0() { return cCartes_par_toursCartes_par_tourEnumRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('carte_spéciale' carte_speciale=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'carte_spéciale'
		public Keyword getCarte_spCialeKeyword_4_0() { return cCarte_spCialeKeyword_4_0; }
		
		//carte_speciale=STRING
		public Assignment getCarte_specialeAssignment_4_1() { return cCarte_specialeAssignment_4_1; }
		
		//STRING
		public RuleCall getCarte_specialeSTRINGTerminalRuleCall_4_1_0() { return cCarte_specialeSTRINGTerminalRuleCall_4_1_0; }
		
		//('Contestation' '(' contestation=Contestation ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Contestation'
		public Keyword getContestationKeyword_5_0() { return cContestationKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//contestation=Contestation
		public Assignment getContestationAssignment_5_2() { return cContestationAssignment_5_2; }
		
		//Contestation
		public RuleCall getContestationContestationEnumRuleCall_5_2_0() { return cContestationContestationEnumRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'fin'
		public Keyword getFinKeyword_6() { return cFinKeyword_6; }
		
		//condition=STRING
		public Assignment getConditionAssignment_7() { return cConditionAssignment_7; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_7_0() { return cConditionSTRINGTerminalRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class FinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Final");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGagnantAvecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGagnantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGagnantGagnantParserRuleCall_2_0 = (RuleCall)cGagnantAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////=======Final=======
		//Final:
		//	'gagnant avec' ':' gagnant=Gagnant
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'gagnant avec' ':' gagnant=Gagnant ';'
		public Group getGroup() { return cGroup; }
		
		//'gagnant avec'
		public Keyword getGagnantAvecKeyword_0() { return cGagnantAvecKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//gagnant=Gagnant
		public Assignment getGagnantAssignment_2() { return cGagnantAssignment_2; }
		
		//Gagnant
		public RuleCall getGagnantGagnantParserRuleCall_2_0() { return cGagnantGagnantParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class GagnantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Gagnant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNombre_de_manches_gagneesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNombre_de_manches_gagneesManches_gagneEsKeyword_0_0_0 = (Keyword)cNombre_de_manches_gagneesAssignment_0_0.eContents().get(0);
		private final Assignment cNombreAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNombreINTTerminalRuleCall_0_1_0 = (RuleCall)cNombreAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPointsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPointsAvecLesPointsKeyword_1_0_0 = (Keyword)cPointsAssignment_1_0.eContents().get(0);
		private final Assignment cNombre_de_pointsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNombre_de_pointsINTTerminalRuleCall_1_1_0 = (RuleCall)cNombre_de_pointsAssignment_1_1.eContents().get(0);
		
		//Gagnant:
		//	nombre_de_manches_gagnees='manches_gagneées' nombre=INT | points='avec les points' nombre_de_points=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//nombre_de_manches_gagnees='manches_gagneées' nombre=INT | points='avec les points' nombre_de_points=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nombre_de_manches_gagnees='manches_gagneées' nombre=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//nombre_de_manches_gagnees='manches_gagneées'
		public Assignment getNombre_de_manches_gagneesAssignment_0_0() { return cNombre_de_manches_gagneesAssignment_0_0; }
		
		//'manches_gagneées'
		public Keyword getNombre_de_manches_gagneesManches_gagneEsKeyword_0_0_0() { return cNombre_de_manches_gagneesManches_gagneEsKeyword_0_0_0; }
		
		//nombre=INT
		public Assignment getNombreAssignment_0_1() { return cNombreAssignment_0_1; }
		
		//INT
		public RuleCall getNombreINTTerminalRuleCall_0_1_0() { return cNombreINTTerminalRuleCall_0_1_0; }
		
		//points='avec les points' nombre_de_points=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//points='avec les points'
		public Assignment getPointsAssignment_1_0() { return cPointsAssignment_1_0; }
		
		//'avec les points'
		public Keyword getPointsAvecLesPointsKeyword_1_0_0() { return cPointsAvecLesPointsKeyword_1_0_0; }
		
		//nombre_de_points=INT
		public Assignment getNombre_de_pointsAssignment_1_1() { return cNombre_de_pointsAssignment_1_1; }
		
		//INT
		public RuleCall getNombre_de_pointsINTTerminalRuleCall_1_1_0() { return cNombre_de_pointsINTTerminalRuleCall_1_1_0; }
	}
	
	public class MainElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Main");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVisibleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVisibleVisibleKeyword_0_0 = (Keyword)cVisibleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCacheeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCacheeCacheeKeyword_1_0 = (Keyword)cCacheeEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Main:
		//	visible | cachee;
		public EnumRule getRule() { return rule; }
		
		//visible | cachee
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//visible
		public EnumLiteralDeclaration getVisibleEnumLiteralDeclaration_0() { return cVisibleEnumLiteralDeclaration_0; }
		
		//'visible'
		public Keyword getVisibleVisibleKeyword_0_0() { return cVisibleVisibleKeyword_0_0; }
		
		//cachee
		public EnumLiteralDeclaration getCacheeEnumLiteralDeclaration_1() { return cCacheeEnumLiteralDeclaration_1; }
		
		//'cachee'
		public Keyword getCacheeCacheeKeyword_1_0() { return cCacheeCacheeKeyword_1_0; }
	}
	public class TempsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Temps");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVisibleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVisibleLimitKeyword_0_0 = (Keyword)cVisibleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCacheeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCacheeNon_limitKeyword_1_0 = (Keyword)cCacheeEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Temps:
		//	visible='limité' | cachee='non_limité';
		public EnumRule getRule() { return rule; }
		
		//visible='limité' | cachee='non_limité'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//visible='limité'
		public EnumLiteralDeclaration getVisibleEnumLiteralDeclaration_0() { return cVisibleEnumLiteralDeclaration_0; }
		
		//'limité'
		public Keyword getVisibleLimitKeyword_0_0() { return cVisibleLimitKeyword_0_0; }
		
		//cachee='non_limité'
		public EnumLiteralDeclaration getCacheeEnumLiteralDeclaration_1() { return cCacheeEnumLiteralDeclaration_1; }
		
		//'non_limité'
		public Keyword getCacheeNon_limitKeyword_1_0() { return cCacheeNon_limitKeyword_1_0; }
	}
	public class Nombre_de_joueursElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Nombre_de_joueurs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDeuxEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDeux2Keyword_0_0 = (Keyword)cDeuxEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPlus_que_2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPlus_que_22Keyword_1_0 = (Keyword)cPlus_que_2EnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Nombre_de_joueurs:
		//	deux='2' | plus_que_2='>2';
		public EnumRule getRule() { return rule; }
		
		//deux='2' | plus_que_2='>2'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//deux='2'
		public EnumLiteralDeclaration getDeuxEnumLiteralDeclaration_0() { return cDeuxEnumLiteralDeclaration_0; }
		
		//'2'
		public Keyword getDeux2Keyword_0_0() { return cDeux2Keyword_0_0; }
		
		//plus_que_2='>2'
		public EnumLiteralDeclaration getPlus_que_2EnumLiteralDeclaration_1() { return cPlus_que_2EnumLiteralDeclaration_1; }
		
		//'>2'
		public Keyword getPlus_que_22Keyword_1_0() { return cPlus_que_22Keyword_1_0; }
	}
	public class TourElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Tour");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPasserEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPasserPasserKeyword_0_0 = (Keyword)cPasserEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cJouerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cJouerJouerKeyword_1_0 = (Keyword)cJouerEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Tour:
		//	passer | jouer;
		public EnumRule getRule() { return rule; }
		
		//passer | jouer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//passer
		public EnumLiteralDeclaration getPasserEnumLiteralDeclaration_0() { return cPasserEnumLiteralDeclaration_0; }
		
		//'passer'
		public Keyword getPasserPasserKeyword_0_0() { return cPasserPasserKeyword_0_0; }
		
		//jouer
		public EnumLiteralDeclaration getJouerEnumLiteralDeclaration_1() { return cJouerEnumLiteralDeclaration_1; }
		
		//'jouer'
		public Keyword getJouerJouerKeyword_1_0() { return cJouerJouerKeyword_1_0; }
	}
	public class Nombre_de_cartesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Nombre_de_cartes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUne_carteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUne_carte1Keyword_0_0 = (Keyword)cUne_carteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTrois_cartesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTrois_cartes3Keyword_1_0 = (Keyword)cTrois_cartesEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Nombre_de_cartes:
		//	une_carte='1' | trois_cartes='3';
		public EnumRule getRule() { return rule; }
		
		//une_carte='1' | trois_cartes='3'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//une_carte='1'
		public EnumLiteralDeclaration getUne_carteEnumLiteralDeclaration_0() { return cUne_carteEnumLiteralDeclaration_0; }
		
		//'1'
		public Keyword getUne_carte1Keyword_0_0() { return cUne_carte1Keyword_0_0; }
		
		//trois_cartes='3'
		public EnumLiteralDeclaration getTrois_cartesEnumLiteralDeclaration_1() { return cTrois_cartesEnumLiteralDeclaration_1; }
		
		//'3'
		public Keyword getTrois_cartes3Keyword_1_0() { return cTrois_cartes3Keyword_1_0; }
	}
	public class Cartes_par_tourElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Cartes_par_tour");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUneUneCarteLaFoisKeyword_0_0 = (Keyword)cUneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPlusieursEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPlusieursPlusieursCartesLaFoisKeyword_1_0 = (Keyword)cPlusieursEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Cartes_par_tour:
		//	une='une carte à la fois' | plusieurs='plusieurs cartes à la fois';
		public EnumRule getRule() { return rule; }
		
		//une='une carte à la fois' | plusieurs='plusieurs cartes à la fois'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//une='une carte à la fois'
		public EnumLiteralDeclaration getUneEnumLiteralDeclaration_0() { return cUneEnumLiteralDeclaration_0; }
		
		//'une carte à la fois'
		public Keyword getUneUneCarteLaFoisKeyword_0_0() { return cUneUneCarteLaFoisKeyword_0_0; }
		
		//plusieurs='plusieurs cartes à la fois'
		public EnumLiteralDeclaration getPlusieursEnumLiteralDeclaration_1() { return cPlusieursEnumLiteralDeclaration_1; }
		
		//'plusieurs cartes à la fois'
		public Keyword getPlusieursPlusieursCartesLaFoisKeyword_1_0() { return cPlusieursPlusieursCartesLaFoisKeyword_1_0; }
	}
	public class ContestationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.MyUNO.Contestation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cValideEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cValideValideKeyword_0_0 = (Keyword)cValideEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFausseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFausseFausseKeyword_1_0 = (Keyword)cFausseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Contestation:
		//	valide | fausse;
		public EnumRule getRule() { return rule; }
		
		//valide | fausse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valide
		public EnumLiteralDeclaration getValideEnumLiteralDeclaration_0() { return cValideEnumLiteralDeclaration_0; }
		
		//'valide'
		public Keyword getValideValideKeyword_0_0() { return cValideValideKeyword_0_0; }
		
		//fausse
		public EnumLiteralDeclaration getFausseEnumLiteralDeclaration_1() { return cFausseEnumLiteralDeclaration_1; }
		
		//'fausse'
		public Keyword getFausseFausseKeyword_1_0() { return cFausseFausseKeyword_1_0; }
	}
	
	private final VarianteElements pVariante;
	private final InitialElements pInitial;
	private final MainElements eMain;
	private final TempsElements eTemps;
	private final Nombre_de_joueursElements eNombre_de_joueurs;
	private final MancheElements pManche;
	private final TourElements eTour;
	private final Nombre_de_cartesElements eNombre_de_cartes;
	private final Cartes_par_tourElements eCartes_par_tour;
	private final ContestationElements eContestation;
	private final FinalElements pFinal;
	private final GagnantElements pGagnant;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyUNOGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVariante = new VarianteElements();
		this.pInitial = new InitialElements();
		this.eMain = new MainElements();
		this.eTemps = new TempsElements();
		this.eNombre_de_joueurs = new Nombre_de_joueursElements();
		this.pManche = new MancheElements();
		this.eTour = new TourElements();
		this.eNombre_de_cartes = new Nombre_de_cartesElements();
		this.eCartes_par_tour = new Cartes_par_tourElements();
		this.eContestation = new ContestationElements();
		this.pFinal = new FinalElements();
		this.pGagnant = new GagnantElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.MyUNO".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Variante:
	//	'variante' name=STRING
	//	'{'
	//	debut=Initial
	//	manche=Manche
	//	fin=Final
	//	'}';
	public VarianteElements getVarianteAccess() {
		return pVariante;
	}
	
	public ParserRule getVarianteRule() {
		return getVarianteAccess().getRule();
	}
	
	////=======Initiale=======
	//Initial:
	//	'Debut' ':'
	//	main=Main
	//	temps=Temps ('temps:' secondes=INT)?
	//	'nombre_cartes_en_main' nombre_cartes_en_main=INT
	//	'nombre_de_joueurs' nombre_de_joueurs=Nombre_de_joueurs
	//	';';
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//enum Main:
	//	visible | cachee;
	public MainElements getMainAccess() {
		return eMain;
	}
	
	public EnumRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//enum Temps:
	//	visible='limité' | cachee='non_limité';
	public TempsElements getTempsAccess() {
		return eTemps;
	}
	
	public EnumRule getTempsRule() {
		return getTempsAccess().getRule();
	}
	
	//enum Nombre_de_joueurs:
	//	deux='2' | plus_que_2='>2';
	public Nombre_de_joueursElements getNombre_de_joueursAccess() {
		return eNombre_de_joueurs;
	}
	
	public EnumRule getNombre_de_joueursRule() {
		return getNombre_de_joueursAccess().getRule();
	}
	
	////=======Manche=======
	//Manche:
	//	'Manche' ':' ('pioche' '(' tour=Tour ')' '(' nombre_de_cartes=Nombre_de_cartes ')')? ('cartes_par_tour' '('
	//	cartes_par_tours=Cartes_par_tour ')')? ('carte_spéciale' carte_speciale=STRING)? ('Contestation' '('
	//	contestation=Contestation ')')?
	//	'fin' condition=STRING
	//	';';
	public MancheElements getMancheAccess() {
		return pManche;
	}
	
	public ParserRule getMancheRule() {
		return getMancheAccess().getRule();
	}
	
	//enum Tour:
	//	passer | jouer;
	public TourElements getTourAccess() {
		return eTour;
	}
	
	public EnumRule getTourRule() {
		return getTourAccess().getRule();
	}
	
	//enum Nombre_de_cartes:
	//	une_carte='1' | trois_cartes='3';
	public Nombre_de_cartesElements getNombre_de_cartesAccess() {
		return eNombre_de_cartes;
	}
	
	public EnumRule getNombre_de_cartesRule() {
		return getNombre_de_cartesAccess().getRule();
	}
	
	//enum Cartes_par_tour:
	//	une='une carte à la fois' | plusieurs='plusieurs cartes à la fois';
	public Cartes_par_tourElements getCartes_par_tourAccess() {
		return eCartes_par_tour;
	}
	
	public EnumRule getCartes_par_tourRule() {
		return getCartes_par_tourAccess().getRule();
	}
	
	//enum Contestation:
	//	valide | fausse;
	public ContestationElements getContestationAccess() {
		return eContestation;
	}
	
	public EnumRule getContestationRule() {
		return getContestationAccess().getRule();
	}
	
	////=======Final=======
	//Final:
	//	'gagnant avec' ':' gagnant=Gagnant
	//	';';
	public FinalElements getFinalAccess() {
		return pFinal;
	}
	
	public ParserRule getFinalRule() {
		return getFinalAccess().getRule();
	}
	
	//Gagnant:
	//	nombre_de_manches_gagnees='manches_gagneées' nombre=INT | points='avec les points' nombre_de_points=INT;
	public GagnantElements getGagnantAccess() {
		return pGagnant;
	}
	
	public ParserRule getGagnantRule() {
		return getGagnantAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
